server {
    listen 80;
    listen [::]:80;
    server_name dronet.propulsion-learn.ch;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name dronet.propulsion-learn.ch;
    ssl_certificate /etc/letsencrypt/live/dronet.propulsion-learn.ch/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dronet.propulsion-learn.ch/privkey.pem;

    # Security related additional options. Not required but nice to have
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options SAMEORIGIN;  # must not be on DENY to make iframe work!
    add_header X-Content-Type-Options nosniff;

    location / {
        root /build;
        try_files $uri /index.html;
    }

    location /backend/ {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        resolver 127.0.0.11; # docker embedded DNS server
        set $target http://backend:8000;
        proxy_pass $target;
    }

    location /static-files/ {
        alias /static-files/;
    }
    location /media-files/ {
        alias /media-files/;
    }
}